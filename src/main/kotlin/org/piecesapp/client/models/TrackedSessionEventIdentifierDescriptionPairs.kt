/**
* Pieces Isomorphic OpenAPI
* Endpoints for Assets, Formats, Users, Asset, Format, User.
*
* The version of the OpenAPI document: 1.0
* Contact: tsavo@pieces.app
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.client.models

import org.openapitools.client.models.EmbeddedModelSchema

import com.squareup.moshi.Json

/**
 * These are all of the available event types that are permitted in an object pair notation.
 * @param schema 
 * @param sessionInitialized The key value pair for an application being opened.
 * @param sessionLocalConnectionSucceeded There was a successful connection locally
 * @param sessionLocalConnectionFailed There was a failed connection locally
 * @param sessionInactive If the current application is in the background or not, could also be minimized.
 * @param sessionActive If the application has been brought to the forground.
 * @param sessionTerminated If the user has closed the application, thus ending the session.
 * @param sessionAuthenticatedWithSignIn A user has signed into this session with a an external account
 * @param sessionUnauthenticatedWithSignOut A user has signed out of this session
 * @param sessionUnauthenticatedWithDismiss A user did not sign into the session with a dismissal
 * @param sessionUnauthenticatedWithRemind A user did not sign into the session with a reminder
 * @param sessionOnboardingInitialized Onboarding has been initialized for this session
 * @param sessionOnboardingCompleted Onboarding has been completed for this session
 */

data class TrackedSessionEventIdentifierDescriptionPairs (
    @Json(name = "schema")
    val schema: EmbeddedModelSchema? = null,
    /* The key value pair for an application being opened. */
    @Json(name = "session_initialized")
    val sessionInitialized: TrackedSessionEventIdentifierDescriptionPairs.SessionInitialized? = null,
    /* There was a successful connection locally */
    @Json(name = "session_local_connection_succeeded")
    val sessionLocalConnectionSucceeded: TrackedSessionEventIdentifierDescriptionPairs.SessionLocalConnectionSucceeded? = null,
    /* There was a failed connection locally */
    @Json(name = "session_local_connection_failed")
    val sessionLocalConnectionFailed: TrackedSessionEventIdentifierDescriptionPairs.SessionLocalConnectionFailed? = null,
    /* If the current application is in the background or not, could also be minimized. */
    @Json(name = "session_inactive")
    val sessionInactive: TrackedSessionEventIdentifierDescriptionPairs.SessionInactive? = null,
    /* If the application has been brought to the forground. */
    @Json(name = "session_active")
    val sessionActive: TrackedSessionEventIdentifierDescriptionPairs.SessionActive? = null,
    /* If the user has closed the application, thus ending the session. */
    @Json(name = "session_terminated")
    val sessionTerminated: TrackedSessionEventIdentifierDescriptionPairs.SessionTerminated? = null,
    /* A user has signed into this session with a an external account */
    @Json(name = "session_authenticated_with_sign_in")
    val sessionAuthenticatedWithSignIn: TrackedSessionEventIdentifierDescriptionPairs.SessionAuthenticatedWithSignIn? = null,
    /* A user has signed out of this session */
    @Json(name = "session_unauthenticated_with_sign_out")
    val sessionUnauthenticatedWithSignOut: TrackedSessionEventIdentifierDescriptionPairs.SessionUnauthenticatedWithSignOut? = null,
    /* A user did not sign into the session with a dismissal */
    @Json(name = "session_unauthenticated_with_dismiss")
    val sessionUnauthenticatedWithDismiss: TrackedSessionEventIdentifierDescriptionPairs.SessionUnauthenticatedWithDismiss? = null,
    /* A user did not sign into the session with a reminder */
    @Json(name = "session_unauthenticated_with_remind")
    val sessionUnauthenticatedWithRemind: TrackedSessionEventIdentifierDescriptionPairs.SessionUnauthenticatedWithRemind? = null,
    /* Onboarding has been initialized for this session */
    @Json(name = "session_onboarding_initialized")
    val sessionOnboardingInitialized: TrackedSessionEventIdentifierDescriptionPairs.SessionOnboardingInitialized? = null,
    /* Onboarding has been completed for this session */
    @Json(name = "session_onboarding_completed")
    val sessionOnboardingCompleted: TrackedSessionEventIdentifierDescriptionPairs.SessionOnboardingCompleted? = null
) {

    /**
    * The key value pair for an application being opened.
    * Values: aSessionHasBeenInitializedAndTheApplicationHasBeenOpened
    */
    
    enum class SessionInitialized(val value: kotlin.String){
        @Json(name = "a_session_has_been_initialized_and_the_application_has_been_opened") aSessionHasBeenInitializedAndTheApplicationHasBeenOpened("a_session_has_been_initialized_and_the_application_has_been_opened");
    }
    /**
    * There was a successful connection locally
    * Values: oneOrMoreApplicationsHasSuccessfullyConnected
    */
    
    enum class SessionLocalConnectionSucceeded(val value: kotlin.String){
        @Json(name = "one_or_more_applications_has_successfully_connected") oneOrMoreApplicationsHasSuccessfullyConnected("one_or_more_applications_has_successfully_connected");
    }
    /**
    * There was a failed connection locally
    * Values: oneOrMoreApplicationsHasFailedToConnectLocally
    */
    
    enum class SessionLocalConnectionFailed(val value: kotlin.String){
        @Json(name = "one_or_more_applications_has_failed_to_connect_locally") oneOrMoreApplicationsHasFailedToConnectLocally("one_or_more_applications_has_failed_to_connect_locally");
    }
    /**
    * If the current application is in the background or not, could also be minimized.
    * Values: aSessionIsInactiveBecauseTheApplicationIsNotInTheForeground
    */
    
    enum class SessionInactive(val value: kotlin.String){
        @Json(name = "a_session_is_inactive_because_the_application_is_not_in_the_foreground") aSessionIsInactiveBecauseTheApplicationIsNotInTheForeground("a_session_is_inactive_because_the_application_is_not_in_the_foreground");
    }
    /**
    * If the application has been brought to the forground.
    * Values: aSessionIsActiveBecauseTheApplicationIsInTheForeground
    */
    
    enum class SessionActive(val value: kotlin.String){
        @Json(name = "a_session_is_active_because_the_application_is_in_the_foreground") aSessionIsActiveBecauseTheApplicationIsInTheForeground("a_session_is_active_because_the_application_is_in_the_foreground");
    }
    /**
    * If the user has closed the application, thus ending the session.
    * Values: aSessionHasBeenEndedAndTheApplicationHasBeenClosed
    */
    
    enum class SessionTerminated(val value: kotlin.String){
        @Json(name = "a_session_has_been_ended_and_the_application_has_been_closed") aSessionHasBeenEndedAndTheApplicationHasBeenClosed("a_session_has_been_ended_and_the_application_has_been_closed");
    }
    /**
    * A user has signed into this session with a an external account
    * Values: aUserHasSignedIntoThisSessionWithAAnExternalAccount
    */
    
    enum class SessionAuthenticatedWithSignIn(val value: kotlin.String){
        @Json(name = "a_user_has_signed_into_this_session_with_a_an_external_account") aUserHasSignedIntoThisSessionWithAAnExternalAccount("a_user_has_signed_into_this_session_with_a_an_external_account");
    }
    /**
    * A user has signed out of this session
    * Values: aUserHasSignedOutOfThisSession
    */
    
    enum class SessionUnauthenticatedWithSignOut(val value: kotlin.String){
        @Json(name = "a_user_has_signed_out_of_this_session") aUserHasSignedOutOfThisSession("a_user_has_signed_out_of_this_session");
    }
    /**
    * A user did not sign into the session with a dismissal
    * Values: aUserDidNotSignIntoTheSessionWithADismissal
    */
    
    enum class SessionUnauthenticatedWithDismiss(val value: kotlin.String){
        @Json(name = "a_user_did_not_sign_into_the_session_with_a_dismissal") aUserDidNotSignIntoTheSessionWithADismissal("a_user_did_not_sign_into_the_session_with_a_dismissal");
    }
    /**
    * A user did not sign into the session with a reminder
    * Values: aUserDidNotSignIntoTheSessionWithAReminder
    */
    
    enum class SessionUnauthenticatedWithRemind(val value: kotlin.String){
        @Json(name = "a_user_did_not_sign_into_the_session_with_a_reminder") aUserDidNotSignIntoTheSessionWithAReminder("a_user_did_not_sign_into_the_session_with_a_reminder");
    }
    /**
    * Onboarding has been initialized for this session
    * Values: onboardingHasBeenInitializedForThisSession
    */
    
    enum class SessionOnboardingInitialized(val value: kotlin.String){
        @Json(name = "onboarding_has_been_initialized_for_this_session") onboardingHasBeenInitializedForThisSession("onboarding_has_been_initialized_for_this_session");
    }
    /**
    * Onboarding has been completed for this session
    * Values: onboardingHasBeenCompletedForThisSession
    */
    
    enum class SessionOnboardingCompleted(val value: kotlin.String){
        @Json(name = "onboarding_has_been_completed_for_this_session") onboardingHasBeenCompletedForThisSession("onboarding_has_been_completed_for_this_session");
    }
}

