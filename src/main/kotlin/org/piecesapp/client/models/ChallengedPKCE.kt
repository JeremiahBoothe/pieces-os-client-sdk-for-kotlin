/**
* Pieces Isomorphic OpenAPI
* Endpoints for Assets, Formats, Users, Asset, Format, User.
*
* The version of the OpenAPI document: 1.0
* Contact: tsavo@pieces.app
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.client.models

import org.openapitools.client.models.EmbeddedModelSchema

import com.squareup.moshi.Json

/**
 * A model that Generates A PKCE Challenge Object with the needed requirements.
 * @param state An opaque value the clients adds to the initial request that Auth0 includes when redirecting the back to the client. This value must be used by the client to prevent CSRF attacks.
 * @param nonce A local key that is held as the comparator to state, thus they should be the same.
 * @param challenge Generated challenge from the code_verifier.
 * @param method Method used to generate the challenge. The PKCE spec defines two methods, S256 and plain, however, Auth0 supports only S256 since the latter is discouraged.
 * @param verifier Cryptographically random key that was used to generate the code_challenge passed to /authorize.
 * @param schema 
 */

data class ChallengedPKCE (
    /* An opaque value the clients adds to the initial request that Auth0 includes when redirecting the back to the client. This value must be used by the client to prevent CSRF attacks. */
    @Json(name = "state")
    val state: java.util.UUID,
    /* A local key that is held as the comparator to state, thus they should be the same. */
    @Json(name = "nonce")
    val nonce: java.util.UUID,
    /* Generated challenge from the code_verifier. */
    @Json(name = "challenge")
    val challenge: kotlin.String,
    /* Method used to generate the challenge. The PKCE spec defines two methods, S256 and plain, however, Auth0 supports only S256 since the latter is discouraged. */
    @Json(name = "method")
    val method: ChallengedPKCE.Method,
    /* Cryptographically random key that was used to generate the code_challenge passed to /authorize. */
    @Json(name = "verifier")
    val verifier: kotlin.String,
    @Json(name = "schema")
    val schema: EmbeddedModelSchema? = null
) {

    /**
    * Method used to generate the challenge. The PKCE spec defines two methods, S256 and plain, however, Auth0 supports only S256 since the latter is discouraged.
    * Values: s256
    */
    
    enum class Method(val value: kotlin.String){
        @Json(name = "S256") s256("S256");
    }
}

